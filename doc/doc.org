* treemud
** act
   Act(tions) are things that are initiated in the world. Functions to
   cause actions are kept in this file.
   Actions are responsable for:
   1. basic sanity checking,
   2. calling world changing functions
   3. and sending out result events
** event
   Events are information nugets that are send out to mobiles in a
   room (or wider area) when an action is taken or somthing happens.
   there are two parts to events, the events themselves and the
   informer functions that inform the PC or AI (including formatting
   the result into a message.) of the event.
   Events are always in the form [observer #^Keyword event cause &
   args] and initiated by the (tell) function.
   The events themselves are handled by a multimethod called event.
   methods of this event are dispatched around [(keyword) event
   (object-type) type of observer].  If observer = cause then the
   event is happening to the caller. Otherwise its someone else
   observing the event in the location.
   
** command
   At the base the command parser exists. In the directory all the
   commands to call actions or just perform informational grabs
   (if in character, then they are actions too.). Commands that cause
   in game actions are usuly simply stubs for action functions
   (collect args, fail if not present, otherwise call action and
   return) most after action results are stringed by the event informer.
** server
   The server is the location of the main function which launches the
   server socket and starts listening for connections. it also moves
   new connections from nanny to account and finaly to command as they
   get further access.
** world
   Contains the functions for world manipulation as well as
   initializing the-world map with the-world-seed. 
   It also contains the centeral world hash.

   treemud.world should only contain information providing functions.
    such as "room?" as well as the functions for server to log users
    into and out of the world (enter and leave)
   
*** *the-world* hash
    Contains all rooms, mobiles and items in the world.
    Each object has a unique vname that it is referenced by in any
    other location, such as :contents sets.
    
    On startup initalize-world seeds world.seed/the-world-seed
    and uses it's resulting map as its value. 

    When players load there PCs, the file contains any items the
    player wishes to persist between mud reboots. This includes their
    inventory. 

    the-world is simply a hash map of vnames and object refrences.
    Manipulation of it should be left to world.change functions.

** seed
   Contains functions needed to define seeds in the-seeds map as well
   as the seed function to initialize objects from them.

*** The seed system
    Seeds are simply functions that take a single argument (a map) and
    return an object map.

    The seed function does most of the work. 
    - It makes sure that if no vname is given a sname#UUID style one
      is generated.
    - It merges the "attrib" map over the result's values
    - It replaces ^:sname-ed symbols with seeded objects
      and adds those objects and any objects they generated to the seq result.
      Makes sure they have the correct refrences to there parent
      (such as :location for objects in the root object's :contents)
    - :sname is assigned to object
    
    This allows for, and encourages seeds to produce sub objects from
    other seeds. Thus allowing lots of re-usability in objects and
    ease of building.

    The system is intended to have objects that act as center points
    that larger object systems are generated from. Such as "area"
    rooms form which all other rooms in the "area" are generated.

    the-world-seed is an example of this.

     
** nanny
   Contains the login prompt and banner. also the account making functions.
** account
   Contains the account managment menu as well as all the account
   creation and managment functions.
   
** utils
   Holds all the utility files such as color

** npc
   Holds all NPC action/reaction system components
   
   All NPC actions are responses to events that are queued in
   there :pending-actions vector.
   
   :tick is an event for time's base unit passing
   
   :timer indicates a preset time period elapsing.
   
*** Event-handling / npc-soul-multiplexer
    :behaviors field on mobiles in the .area files contain vectors of 
    function names that are behavior events. Each handle an arbitrary
    number of events.
    Each function will be called for every event the NPC is subject of
    or is able to detect.
    Each function can return a vector of pending-actions to be added
    to the back of the pending-actions queue.
    There is no way for one behavior to prevent another down the line
    from doing something about an event as well so it is up to the
    builder no to pair to many like behaviors together to prevent npcs
    acting crazy. 
    
*** Behaviors
    Behaviors should be functions that operate on a specific group of
    events in a specific theme. 
    examples:
    wanderer - makes the NPC wonder around the area slowly at random.
    aggressive - attacks any PC that it detects.
    coward - attempts to repeatedly flee if attacked.
    
    More advanced event handling will be implemented in the 'scripted'
    behavior for the scripting system.
    
    Most actions in the world cause actions, so behaviors should only
    react to specific events to avoid looping off each other.

*** pending-actions vector
    Pending actions are {:fn fn :mobile self :args args} calls that
    always are always called (apply fn self args) that have side effects. They
    will be called one by one by the NPC action thread.  

    Note: NPCs should not directly change any world values excluding
    there own. Instead they should use act functions like PC commands.
    Action functions are the NPC analogy to PC Commands.

*** tick-npcs
    All npc will receive a :tick event every second by the npc-tick
    function. 
    Cause will be equal to self.
    This is for any actions the npc will take over time without
    interaction with PCs.
    
** tick
   
*** master-tick
    The master-tick thread calls all the tick functions in  tick-fns
    at there specified time. Tick functions are added to the system
    with def-tick which defines a tick function by a namespace
    qualified symbol and number of ticks in between calls. Default
    tick time is 1000 milliseconds.
    This is used for tick-npcs and any other system that requires the
    notice of passing time.
